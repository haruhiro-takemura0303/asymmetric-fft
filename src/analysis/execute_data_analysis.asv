clear all
clear classes

% analysis--
%       |--trial
%             |--ampA
%                   |-Horizontal
%                   |-Vertical


%----------------------------------config------------------------------------
% データタイプ
AMP_TYPE = "a"; %a,b,c 
DATA_PATH  = "./data/processed";
SAVE_PATH = "./data/analysis";
DIRECTION = "Vertical"; %Vertical , Horizontal

% 分析周期
PERIOD_LIST = [5*40,5*1000,5*10000];

% アップサンプリング倍率
% UPRATE_LIST = [0,10,20];%%%%%%%%%%%%%%%%%%
UPRATE_LIST = [0,0];
%--------------------------------------info------------------------------------
% 電源タイプ
SUPPLY_LIST = ["clean" "commercial" "uni"];

% 電源極性
% polarList1  = ["aa" "ab" "ba" "bb"]; %cl,co 
 polarList1  = ["aa" "ab"]; %cl,co 
polarList2  = ["c" "d"]; %uni

% 試行回数
trialLen = 2;

% amp
AMP_NAME = "amp_" + AMP_TYPE;

% 切り取り
rate_trim = 0.05;

%--------------------------------------main------------------------------------
for trialNum = 1:trialLen
    for supplyNum = 1:length(SUPPLY_LIST)
        %%データセットの読み込み
        % 読み込み
        supplyType = SUPPLY_LIST(supplyNum);
        disp("%%---------Start Analysis "+AMP_NAME+" "+supplyType+"---------")
        disp("%%  > Read Data")
        data_strct = load(DATA_PATH+"/"+AMP_NAME+"/"+supplyType+".mat");
        
        % 極性リストの更新
        if supplyType == "uni"
            polarList = polarList2;
        else
            polarList = polarList1;
        end
    
        %%計算開始
    
            % 信号情報読み込み
            load(DATA_PATH+"/"+AMP_NAME+"/parameter.mat")

        for polarNum = 1:length(polarList)
            for vppNum = 1:length(parameter.vpp)
                for freqNum = 1:length(parameter.freq)-1 %%%%%%%%%%%%%%%%%
                    
                    %%信号の読み込み
                    disp("%%")
                    disp("%%  > Read Signal")
                    disp("%%  --------------------------")
                    data = data_strct.(supplyType).(polarList(polarNum)).freq(freqNum).vpp(vppNum).trial(trialNum).signal;
                    
                    % 信号の情報
                    fs = parameter.Fs;
                    fs_up = UPRATE_LIST(freqNum)*fs;
                    f = parameter.freq(freqNum);

                    disp("%%   - Supply : "+sprintf("%s, ",SUPPLY_LIST(1:supplyNum)))
                    disp("%%   - Trial  : "+sprintf("%i, ",(1:trialNum)))
                    disp("%%   - Polar  : "+sprintf("%s, ",polarList(1:polarNum)))
                    disp("%%   - Vpp    : "+sprintf("%.1f, ",parameter.vpp(1:vppNum)))
                    disp("%%   - Freq   : "+sprintf("%i, ",parameter.freq(1:freqNum)))
                    disp("%%        -- Fs     : "+num2str(fs))
                    disp("%%        -- Fs_up  : "+num2str(fs_up))
                    

                    %---------------------analysis----------------------------
                    disp("%%")
                    disp("%%  > Start FFT Analysis")
                    disp("%%  --------------------------")
                    % インスタンス
                    rec = Reconstruct(PERIOD_LIST(freqNum));
                    
                    % 信号の分析
                    
                    for signalNum = 1:6
                        disp("%%   - Calculate Signal "+ num2str(signalNum))
                        signal = data(:,signalNum);
                        
                        % 前処理
                        [signal_p,fs_p] = executePreprocess(signal,fs,f,fs_up,rate_trim);
                        
                        % 分離
                        sep = Separation(fs_p,f);
                        cellPushSignal = sep.separateExtendMotion(signal_p,1);
                        cellPullSignal = sep.separateExtendMotion(signal_p,2);
                        
                        % 合成
                        signalPushVert = rec.reconstructVertical(cellPushSignal,1);
                        signalPullVert = rec.reconstructVertical(cellPullSignal,2);
                       
                        signalPushHoriz = rec.reconstructHorizontal(cellPushSignal,1);
                        signalPullHoriz = rec.reconstructHorizontal(cellPullSignal,2);
                        
                        % fft
                        [~,signalFFTlist(:,signalNum)] = calcFFT(fs_p,signal_p(1:length(signalPushVert)+length(signalPullVert)));
                        %vert
                        [~,pushVertFFTlist(:,signalNum)] = calcFFT(fs_p,signalPushVert);
                        [~,pullVertFFTlist(:,signalNum)] = calcFFT(fs_p,signalPullVert);
                        %Horiz
                        [~,pushHorizFFTlist(:,signalNum)] = calcFFT(fs_p,signalPushHoriz);
                        [~,pullHorizFFTlist(:,signalNum)] = calcFFT(fs_p,signalPullHoriz);

                        
                    end
                    
                    %%データの格納
                    if supplyType == "clean"
                        cleanV.(polarList(polarNum)).freq(freqNum).vpp(vppNum).mode(1).magnitude = pushVertFFTlist;
                        cleanV.(polarList(polarNum)).freq(freqNum).vpp(vppNum).mode(2).magnitude = pullVertFFTlist;
                        cleanV.(polarList(polarNum)).freq(freqNum).vpp(vppNum).mode(3).magnitude = signalFFTlist;

                        cleanH.(polarList(polarNum)).freq(freqNum).vpp(vppNum).mode(1).magnitude = pushHorizFFTlist;
                        cleanH.(polarList(polarNum)).freq(freqNum).vpp(vppNum).mode(2).magnitude = pullHorizFFTlist;
                        cleanH.(polarList(polarNum)).freq(freqNum).vpp(vppNum).mode(3).magnitude = signalFFTlist;
                    
                    elseif supplyType == "commercial"
                        commercialV.(polarList(polarNum)).freq(freqNum).vpp(vppNum).mode(1).magnitude = pushVertFFTlist;
                        commercialV.(polarList(polarNum)).freq(freqNum).vpp(vppNum).mode(2).magnitude = pullVertFFTlist;
                        commercialV.(polarList(polarNum)).freq(freqNum).vpp(vppNum).mode(3).magnitude = signalFFTlist;

                        commercialH.(polarList(polarNum)).freq(freqNum).vpp(vppNum).mode(1).magnitude = pushHorizFFTlist;
                        commercialH.(polarList(polarNum)).freq(freqNum).vpp(vppNum).mode(2).magnitude = pullHorizFFTlist;
                        commercialH.(polarList(polarNum)).freq(freqNum).vpp(vppNum).mode(3).magnitude = signalFFTlist;
                    
                    elseif supplyType == "uni"
                        uniV.(polarList(polarNum)).freq(freqNum).vpp(vppNum).mode(1).magnitude = pushVertFFTlist;
                        uniV.(polarList(polarNum)).freq(freqNum).vpp(vppNum).mode(2).magnitude = pullVertFFTlist;
                        uniV.(polarList(polarNum)).freq(freqNum).vpp(vppNum).mode(3).magnitude = signalFFTlist;

                        unilH.(polarList(polarNum)).freq(freqNum).vpp(vppNum).mode(1).magnitude = pushHorizFFTlist;
                        uniH.(polarList(polarNum)).freq(freqNum).vpp(vppNum).mode(2).magnitude = pullHorizFFTlist;
                        uniH.(polarList(polarNum)).freq(freqNum).vpp(vppNum).mode(3).magnitude = signalFFTlist;
                    end

                    disp("%%  - Finish FFT Analysis")
                    disp("%%")
                    clear signalFFTlist pushVertFFTlist pullVertFFTlist pushHorizFFTlist pullHorizFFTlist
                end
            end
        end
    end
    %--------------------------------------save------------------------------------
    disp("%%")
    disp("%%  > Save Analysis Data")
    disp("%%  --------------------------")
    disp("%%   - Amp       : "+AMP_NAME)
    disp("%%   - Trial     : "+trialNum)
    disp("%%   - Direction : "+DIRECTION)
    
    %%フォルダの確認
    if exist(SAVE_PATH+"/"+AMP_NAME,"dir") == 0
        mkdir(SAVE_PATH+"/"+AMP_NAME)
        mkdir(SAVE_PATH+"/"+AMP_NAME+"/"+num2str(trialNum) )
        mkdir(SAVE_PATH+"/"+AMP_NAME+"/"+num2str(trialNum)+"/Vertical")
        mkdir(SAVE_PATH+"/"+AMP_NAME+"/"+num2str(trialNum)+"/Horizontal")
    end
    
    %%保存
    % Vert
    save(SAVE_PATH+"/"+AMP_NAME+"/"+num2str(trialNum)+"/Vertical"+"/clean.mat","cleanV",'-v7.3');
    save(SAVE_PATH+"/"+AMP_NAME+"/"+num2str(trialNum)+"/Vertical"+"/commercial.mat","commercialV",'-v7.3');
    save(SAVE_PATH+"/"+AMP_NAME+"/"+num2str(trialNum)+"/Vertical"+"/uni.mat","uniV",'-v7.3');
    

    % Horz
    save(SAVE_PATH+"/"+AMP_NAME+"/"+num2str(trialNum)+"/Vertical"+"/clean.mat","cleanH",'-v7.3');
    save(SAVE_PATH+"/"+AMP_NAME+"/"+num2str(trialNum)+"/Vertical"+"/commercial.mat","commercialH",'-v7.3');
    save(SAVE_PATH+"/"+AMP_NAME+"/"+num2str(trialNum)+"/Vertical"+"/uni.mat","uniH",'-v7.3');
    
    clear cleanV commercialV uniV cleanH commercialH uniH   
    disp("%%  Finish")
end

% parameterへ追記
parameter.period = PERIOD_LIST;
parameter.upRate = UPRATE_LIST;
save(SAVE_PATH+"/"+AMP_NAME+"/parameter.mat","parameter",'-v7.3');


%% function
function [signal_p,newfsp] = executePreprocess(signalp,fs,f,fsp_up,rate_trim)
    % コンストラクタ
    pre = Preprocess(fs,f);

    % 無音処理
    signal_p1 = pre.trimSilence(signalp);
    
    % アップサンプリング
    if fsp_up ~=0
        signal_p2 = pre.resampleSignal(fsp_up,signal_p1);
        newfsp = fsp_up;
        pre = pre.resetFs(newfsp); % サンプリング周波数の再定義
    
    else
        signal_p2 = signal_p1;
        newfsp = fs;
    end
    
    % 前後切り出し
    trim_period = round(length(signal_p2)*rate_trim / (newfsp/f));
    signal_p = pre.reshapeSignal(trim_period,signal_p2);
end

function [freq,mag] = calcFFT(fs,signal)
    % FFT実行
    L = length(signal);
    Y = fft(signal); 
    P2 = abs(Y/L);
    P1 = P2(1:L/2+1);
    P1(2:end-1) = 2*P1(2:end-1);
    freq = fs*(0:(L/2))/L;
    mag = mag2db(P1);
end